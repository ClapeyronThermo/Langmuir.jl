        - abstract type MultiComponentIsothermModel{T} end
        -
        - struct ExtendedLangmuir{T,ùïÄ} <: MultiComponentIsothermModel{T}
        6     isotherms::ùïÄ
        - end
        -
        - struct IASTModels{T,ùïÄ} <: MultiComponentIsothermModel{T}
        -     isotherms::ùïÄ
        - end
        -
        - struct aNRTLModel{T, ùïÄ, B <: AbstractMatrix{T}} <: MultiComponentIsothermModel{T}
        1     isotherms::ùïÄ
        -     Œí·µ¢‚±º::B
        - end
        -
        6 function _extendedlangmuir(::Type{T}, isotherms::ùïÄ) where {T,ùïÄ}
        6     return ExtendedLangmuir{T,ùïÄ}(isotherms)
        - end
        -
        6 _extendedlangmuir(isotherms::I) where I = _extendedlangmuir(eltype(first(isotherms)), isotherms)
        -
        6 function ExtendedLangmuir(m_first::I, m_rest::Vararg{I}) where {I <: Union{LangmuirS1, MultiSite}}
        6     return _extendedlangmuir((m_first, m_rest...))
        - end
        -
        -
        - function _iastmodels(::Type{T}, isotherms::ùïÄ) where {T,ùïÄ}
        -     return IASTModels{T,ùïÄ}(isotherms)
        - end
        -
        - _iastmodels(isotherms::I) where I = _iastmodels(eltype(first(isotherms)), isotherms)
        -
        - function IASTModels(m_first::I, m_rest::Vararg{I}) where {I <: IsothermModel}
        -     return _iastmodels((m_first, m_rest...))
        - end
        -
        1 function aNRTLModel(models::Tuple{I, Vararg{I}}) where I <: ThermodynamicLangmuir
        2     B·µ¢·µ© = getfield.(models, :B·µ¢·µ©) |> collect
        2     B·µ¢‚±º = B·µ¢·µ© .- B·µ¢·µ©' # Estimated interaction parameters from pure isotherm
        1     T = eltype(B·µ¢‚±º)
        1     return aNRTLModel{T,typeof(models),typeof(B·µ¢‚±º)}(models, B·µ¢‚±º)
        - end
        -
        - function aNRTLModel(models::Tuple{I, Vararg{I}}) where I <: IsothermModel
        -     isotherms = collect(models)
        -     NIsotherms = length(isotherms)
        -     T = Base.promote_eltype(models...)
        -     B·µ¢·µ© = zeros(T,(NIsotherms,NIsotherms)) #Ideal model
        -     return aNRTLModel{T,typeof(models),typeof(B·µ¢‚±º)}(models, B·µ¢‚±º)
        - end
        -
        6 function loading(model::ExtendedLangmuir{_T, I}, p, T, y·µ¢) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}
       12     _y = y·µ¢/sum(y·µ¢)
        6     p·µ¢ = p*_y
        6     return loading(model, p·µ¢, T)
        - end
        -
        6 function loading(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}
        -
        6     _1_‚àëkP = one(eltype(T))
       12     loadings = similar(p·µ¢)
        6     models = model.isotherms
        -
        6     for i ‚àà eachindex(p·µ¢)
        0             loadings[i] = begin
       12                 M, K‚ÇÄ, E = models[i].M, models[i].K‚ÇÄ, models[i].E
       12                 MKpy = M*K‚ÇÄ*exp(-E/(Rgas(model)*T))*p·µ¢[i]
       12                 _1_‚àëkP += MKpy/M
       12                 MKpy
        -             end
       18     end
        -
        6     return loadings./_1_‚àëkP
        - end
        -
        2 function loading(model::ExtendedLangmuir{_T, I}, p, T, y) where {_T, I <: Tuple{Vararg{<:MultiSite{_T}}}}
        -
        2         unpack_multisite = getfield.(model.isotherms, :isotherms)
        -
        6         Es = collect.(map(x -> getfield.(x, :E), unpack_multisite) |> collect)
        -
        2         N_sites =  length(Es[1])
        -
        2         sites_to_match = sortperm.(Es)
        -
        2         models = [ExtendedLangmuir(
        -             getindex.(collect(unpack_multisite), getindex.(sites_to_match, i))...
        -             )
        -              for i in 1:N_sites]
        -
        6         loadings = mapreduce(m -> loading(m, p, T, y), +, models)
        -
        2         return loadings
        - end
        -
        -
        - function loading(model::IASTModels, p, T, y; method = IASTNestedLoop(), gas_model = nothing, x0 = nothing, maxiters = 100, reltol = 1e-12, abstol = 1e-10)
        -
        -     (n_total, x, is_success) = iast(model.isotherms, p, T, y, method, gas_model, x0 = x0, maxiters = maxiters, reltol = reltol, abstol = abstol)
        -
        -     loadings = similar(y)
        -
        -     if is_success == :success
        -         loadings .= x.*n_total
        -     else
        -         # Convergence failed
        -         error("Convergence failed - current number of iterations is $maxiters, consider increasing to meet tolerances.")
        -     end
        -
        -     return loadings
        - end
        -
        -
        - function isosteric_heat(model::IASTModels, p, T, y; Vg = Rgas(model).*T./(p.*y), V‚Çê = zeros(length(y)), method = IASTNestedLoop(), gas_model = nothing, x0 = nothing, maxiters = 100, reltol = 1e-12, abstol = 1e-10)
        -
        -     (n_total, x, is_success) = iast(model.isotherms, p, T, y, method, gas_model, x0 = x0, maxiters = maxiters, reltol = reltol, abstol = abstol)
        -
        -     if is_success == :success
        -
        -         P·µ¢‚ÇÄ_œÄ = y.*p./x
        -     else
        -         # Convergence failed
        -         error("Convergence failed - current number of iterations is $maxiters, consider increasing to meet tolerances.")
        -     end
        -
        -     ‚àÇœà_‚àÇp = map(m_P·µ¢‚ÇÄ_œÄ -> -1.0 * loading(first(m_P·µ¢‚ÇÄ_œÄ), last(m_P·µ¢‚ÇÄ_œÄ), T)/last(m_P·µ¢‚ÇÄ_œÄ), zip(model.isotherms, P·µ¢‚ÇÄ_œÄ))
        -
        -     ‚àÇœà_‚àÇT = map(m_P·µ¢‚ÇÄ_œÄ -> -1.0 * ForwardDiff.derivative(T -> sp_res(first(m_P·µ¢‚ÇÄ_œÄ), last(m_P·µ¢‚ÇÄ_œÄ), T),  T), zip(model.isotherms, P·µ¢‚ÇÄ_œÄ))
        -
        -     return T.*(Vg .- V‚Çê).*(‚àÇœà_‚àÇT./‚àÇœà_‚àÇp).*x
        - end
        -
        -
        - function isosteric_heat(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}
        -
        - #=     p·µ¢_T = [p·µ¢; T]
        -     f(p·µ¢_T) = loading(model, first(p·µ¢_T, length(p·µ¢)), last(p·µ¢_T))
        -     »∑_I = ForwardDiff.jacobian(f, p·µ¢_T)
        -
        -     ‚àÇp·µ¢‚àÇT = @views »∑_I[:, 1:end - 1]\»∑_I[:, end]
        -     return @. T*(V·µç - V·µÉ).*‚àÇp·µ¢‚àÇT #No excess heat due to mixing. =#
        -
        -     return map(p_model -> isosteric_heat(last(p_model), first(p_model), T), zip(p·µ¢, model.isotherms))
        -
        - end
        -
        - function isosteric_heat(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<: MultiSite{_T} }}}
        -     return map(p_model -> isosteric_heat(last(p_model), first(p_model), T), zip(p·µ¢, model.isotherms))
        - end
        -
        -
        - function isosteric_heat(model::ExtendedLangmuir{_T, I}, p, T, y·µ¢) where {_T, I <: Tuple{Vararg{ <: Union{MultiSite{_T}, LangmuirS1{_T}}}}}
        -     _y = y·µ¢/sum(y·µ¢)
        -     p·µ¢ = p*_y
        -     isosteric_heat(model, p·µ¢, T)
        - end
        -
        1 function gibbs_excess_free_energy(model::aNRTLModel, T, x::AbstractVector)
        1     B·µ¢‚±º = model.Œí·µ¢‚±º
        1     i1,i2 = size(B·µ¢‚±º)
        1     _0 = zero(Base.promote_eltype(B·µ¢‚±º,T,x))
        2     ‚àëx‚Åª¬π = 1/sum(x)
        1     T‚Åª¬π = one(T)/T
        1     g·¥±_RT = _0
        1     for i ‚àà 1:i1
        2         ‚àëœÑ‚±º·µ¢G‚±º·µ¢x‚±º = _0
        2         ‚àëG‚±º·µ¢x‚±º = _0
        2         x·µ¢ = x[i]*‚àëx‚Åª¬π
        2         for j ‚àà 1:i2
        4             x‚±º = x[j]*‚àëx‚Åª¬π
        4             œÑ‚±º·µ¢ = B·µ¢‚±º[j,i]*T‚Åª¬π
        4             G‚±º·µ¢ = exp(-0.3*œÑ‚±º·µ¢)
        4             G‚±º·µ¢x‚±º = x‚±º*G‚±º·µ¢
        4             ‚àëG‚±º·µ¢x‚±º += G‚±º·µ¢x‚±º
        4             ‚àëœÑ‚±º·µ¢G‚±º·µ¢x‚±º += G‚±º·µ¢x‚±º*œÑ‚±º·µ¢
        6         end
        2         g·¥±_RT += x·µ¢*‚àëœÑ‚±º·µ¢G‚±º·µ¢x‚±º/‚àëG‚±º·µ¢x‚±º
        3     end
        1     return g·¥±_RT
        - #=
        -     Œ∏ = x./sum(x)
        -     B·µ¢‚±º = model.Œí·µ¢‚±º
        -     T‚Åª¬π = one(T)./T
        -
        -     œÑ·µ¢‚±º = B·µ¢‚±º*T‚Åª¬π
        -     G·µ¢‚±º = exp.(-0.3.*œÑ·µ¢‚±º)
        -
        -     ‚àë‚±ºŒ∏‚±ºœÑ·µ¢‚±º = œÑ·µ¢‚±º*Œ∏
        -     ‚àë‚ÇñŒ∏‚ÇñG‚Çñ·µ¢ = G·µ¢‚±º'*Œ∏
        -
        -     g·¥±_RT = sum((‚àë‚±ºŒ∏‚±ºœÑ·µ¢‚±º./‚àë‚ÇñŒ∏‚ÇñG‚Çñ·µ¢).*Œ∏)
        -
        -     return g·¥±_RT
        -     =#
        - end
        -
        - function activity_coefficient(model::MultiComponentIsothermModel, T, x::AbstractVector)
        -
        -     fun = let model = model, T = T
        -         x -> gibbs_excess_free_energy(model, T, x)
        -     end
        -     cache = similar(x)
        -     return exp.(ForwardDiff.gradient!(cache, fun, x))
        - end
        -
        -
        - export ExtendedLangmuir, IASTModels, ThermodynamicLangmuirModels, aNRTLModel
