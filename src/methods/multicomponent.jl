abstract type MultiComponentIsothermModel{T} end

struct ExtendedLangmuir{T,ùïÄ} <: MultiComponentIsothermModel{T}
    isotherms::ùïÄ
end

struct IASTModels{T,ùïÄ} <: MultiComponentIsothermModel{T}
    isotherms::ùïÄ
end

struct aNRTLModel{ùïÄ, B <: Array}
    isotherms::ùïÄ
    Œí·µ¢‚±º::B
end

function _extendedlangmuir(::Type{T}, isotherms::ùïÄ) where {T,ùïÄ}
    return ExtendedLangmuir{T,ùïÄ}(isotherms)
end

_extendedlangmuir(isotherms::I) where I = _extendedlangmuir(eltype(first(isotherms)), isotherms)

function ExtendedLangmuir(m_first::I, m_rest::Vararg{I}) where {I <: Union{LangmuirS1, MultiSite}}
    return _extendedlangmuir((m_first, m_rest...))
end


function _iastmodels(::Type{T}, isotherms::ùïÄ) where {T,ùïÄ}
    return IASTModels{T,ùïÄ}(isotherms)
end

_iastmodels(isotherms::I) where I = _iastmodels(eltype(first(isotherms)), isotherms)

function IASTModels(m_first::I, m_rest::Vararg{I}) where {I <: IsothermModel}
    return _iastmodels((m_first, m_rest...))
end

function aNRTLModel(models::Tuple{I, Vararg{I}}) where I <: ThermodynamicLangmuir
    B·µ¢·µ© = getfield.(models, :B·µ¢·µ©) |> collect
    B·µ¢‚±º = B·µ¢·µ© .- B·µ¢·µ©' # Estimated interaction parameters from pure isotherm 
    return aNRTLModel(models, B·µ¢‚±º)
end

function aNRTLModel(models::Tuple{I, Vararg{I}}) where I <: IsothermModel
    isotherms = collect(models)
    NIsotherms = length(isotherms)
    B·µ¢·µ© = zeros(NIsotherms) #Ideal model
    B·µ¢‚±º = B·µ¢·µ© .- B·µ¢·µ©'  
    return aNRTLModel(I, B·µ¢‚±º)
end

function loading(model::ExtendedLangmuir{_T, I}, p, T, y·µ¢) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}
    _y = y·µ¢/sum(y·µ¢) 
    p·µ¢ = p*_y
    return loading(model, p·µ¢, T)
end

function loading(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}

    _1_‚àëkP = one(eltype(T))
    loadings = similar(p·µ¢)
    models = model.isotherms

    for i ‚àà eachindex(p·µ¢)
            loadings[i] = begin
                M, K‚ÇÄ, E = models[i].M, models[i].K‚ÇÄ, models[i].E
                MKpy = M*K‚ÇÄ*exp(-E/(Rgas(model)*T))*p·µ¢[i]
                _1_‚àëkP += MKpy/M
                MKpy
            end
    end

    return loadings./_1_‚àëkP
end


function loading(model::ExtendedLangmuir{_T, I}, p, T, y) where {_T, I <: Tuple{Vararg{<:MultiSite{_T}}}}
        
        unpack_multisite = getfield.(model.isotherms, :isotherms)

        Es = collect.(map(x -> getfield.(x, :E), unpack_multisite) |> collect)

        N_sites =  length(Es[1])

        sites_to_match = sortperm.(Es)

        models = [ExtendedLangmuir(
            getindex.(collect(unpack_multisite), getindex.(sites_to_match, i))...
            )
             for i in 1:N_sites]

        loadings = mapreduce(m -> loading(m, p, T, y), +, models)

        return loadings
end


function loading(model::IASTModels, p, T, y; method = IASTNestedLoop(), gas_model = nothing, x0 = nothing, maxiters = 100, reltol = 1e-12, abstol = 1e-10)
     
    (n_total, x, is_success) = iast(model.isotherms, p, T, y, method, gas_model, x0 = x0, maxiters = maxiters, reltol = reltol, abstol = abstol)

    loadings = similar(y)

    if is_success == :success
        loadings .= x.*n_total
    else
        # Convergence failed
        error("Convergence failed - current number of iterations is $maxiters, consider increasing to meet tolerances.")
    end

    return loadings
end


function isosteric_heat(model::IASTModels, p, T, y; Vg = Rgas(model).*T./(p.*y), V‚Çê = zeros(length(y)), method = IASTNestedLoop(), gas_model = nothing, x0 = nothing, maxiters = 100, reltol = 1e-12, abstol = 1e-10)
    
    (n_total, x, is_success) = iast(model.isotherms, p, T, y, method, gas_model, x0 = x0, maxiters = maxiters, reltol = reltol, abstol = abstol)

    if is_success == :success

        P·µ¢‚ÇÄ_œÄ = y.*p./x
    else
        # Convergence failed
        error("Convergence failed - current number of iterations is $maxiters, consider increasing to meet tolerances.")
    end

    ‚àÇœà_‚àÇp = map(m_P·µ¢‚ÇÄ_œÄ -> -1.0 * loading(first(m_P·µ¢‚ÇÄ_œÄ), last(m_P·µ¢‚ÇÄ_œÄ), T)/last(m_P·µ¢‚ÇÄ_œÄ), zip(model.isotherms, P·µ¢‚ÇÄ_œÄ)) 

    ‚àÇœà_‚àÇT = map(m_P·µ¢‚ÇÄ_œÄ -> -1.0 * ForwardDiff.derivative(T -> sp_res(first(m_P·µ¢‚ÇÄ_œÄ), last(m_P·µ¢‚ÇÄ_œÄ), T),  T), zip(model.isotherms, P·µ¢‚ÇÄ_œÄ))

    return T.*(Vg .- V‚Çê).*(‚àÇœà_‚àÇT./‚àÇœà_‚àÇp).*x
end


function isosteric_heat(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<:LangmuirS1{_T}}}}

#=     p·µ¢_T = [p·µ¢; T]
    f(p·µ¢_T) = loading(model, first(p·µ¢_T, length(p·µ¢)), last(p·µ¢_T))
    »∑_I = ForwardDiff.jacobian(f, p·µ¢_T)
    
    ‚àÇp·µ¢‚àÇT = @views »∑_I[:, 1:end - 1]\»∑_I[:, end]
    return @. T*(V·µç - V·µÉ).*‚àÇp·µ¢‚àÇT #No excess heat due to mixing. =#

    return map(p_model -> isosteric_heat(last(p_model), first(p_model), T), zip(p·µ¢, model.isotherms))

end

function isosteric_heat(model::ExtendedLangmuir{_T, I}, p·µ¢, T) where {_T, I <: Tuple{Vararg{<: MultiSite{_T} }}}
    
        return map(p_model -> isosteric_heat(last(p_model), first(p_model), T), zip(p·µ¢, model.isotherms))
    
end


function isosteric_heat(model::ExtendedLangmuir{_T, I}, p, T, y·µ¢) where {_T, I <: Tuple{Vararg{ <: Union{MultiSite{_T}, LangmuirS1{_T}}}}}
    _y = y·µ¢/sum(y·µ¢) 
    p·µ¢ = p*_y
    isosteric_heat(model, p·µ¢, T)
end


function gibbs_excess_free_energy(model::aNRTLModel, T, x::Vector)
    
    Œ∏ = x./sum(x)
    B·µ¢‚±º = model.Œí·µ¢‚±º
    T‚Åª¬π = one(T)./T

    œÑ·µ¢‚±º = B·µ¢‚±º*T‚Åª¬π
    G·µ¢‚±º = exp.(-0.3.*œÑ·µ¢‚±º)

    ‚àë‚±ºŒ∏‚±ºœÑ·µ¢‚±º = œÑ·µ¢‚±º*Œ∏
    ‚àë‚ÇñŒ∏‚ÇñG‚Çñ·µ¢ = G·µ¢‚±º'*Œ∏

    g·¥±_RT = sum((‚àë‚±ºŒ∏‚±ºœÑ·µ¢‚±º./‚àë‚ÇñŒ∏‚ÇñG‚Çñ·µ¢).*Œ∏)

    return g·¥±_RT
    
end

function activity_coefficient(model::aNRTLModel, T, x::Vector)
    
    fun = let model = model, T = T 
        x -> gibbs_excess_free_energy(model, T, x)
    end

    cache = similar(x)

    return exp.(ForwardDiff.gradient!(cache, fun, x))
end

export ExtendedLangmuir, IASTModels, ThermodynamicLangmuirModels, aNRTLModel